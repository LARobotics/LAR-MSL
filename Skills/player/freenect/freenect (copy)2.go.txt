package freenect

/*
#cgo CPPFLAGS: -std=c++11 -O3 -Wall -w -I/usr/include/opencv4
#cgo LDFLAGS: -lfreenect -lfreenect_sync -lopencv_core -lopencv_imgproc -lopencv_highgui -lpthread
#cgo CFLAGS: -I/home/rui/Desktop/Tese/test -I/usr/local/include/libfreenect


#include <libfreenect.h>
#include <libfreenect_sync.h>
//#include </home/rui/Desktop/Tese/test/freenect.h>
#include <stdbool.h>
#include <pthread.h>


bool m_new_rgb_frame;
uint8_t *m_buffer_depth;
uint8_t *m_buffer_rgb;
uint8_t *rgb_back;// = (uint8_t*)malloc(640*480*3);

 

pthread_mutex_t m_rgb_mutex;
//pthread_mutex_t m_depth_mutex;

void initRGBBuffers(void)
{
	rgb_back = (uint8_t*)malloc(640*480*3);
}

void depth_cb(freenect_device* dev, void* data, uint32_t timestamp)
{
	//printf("Received depth frame at %d\n", timestamp);
}

void video_cb(freenect_device* dev, void* data, uint32_t timestamp)
{
	pthread_mutex_lock(&m_rgb_mutex);

	uint8_t* rgb = data;
	m_buffer_rgb = rgb;
	pthread_mutex_unlock(&m_rgb_mutex);

	m_new_rgb_frame = true;
}

*/
import "C"
import (
	"fmt"
	"unsafe"

	"gocv.io/x/gocv"
)


type Kinect struct {
	Ctx *C.freenect_context
	Dev *C.freenect_device
}

func (d *Kinect) InitKinectContext() {
	fmt.Printf("freenect_init() \n")
	if C.freenect_init(&d.Ctx, C.NULL) < 0 {
		fmt.Printf("freenect_init() failed\n")

	}

	C.freenect_set_log_level(d.Ctx, C.FREENECT_LOG_DEBUG)
	C.freenect_select_subdevices(d.Ctx, C.FREENECT_DEVICE_CAMERA) // C.FREENECT_DEVICE_MOTOR |
	fmt.Printf("InitKinectContext\n")
 
}

func (d *Kinect) InitKinectDevice() {
	for nr_devices := C.freenect_num_devices(d.Ctx); nr_devices <= 0; {
		fmt.Printf("Number of devices found: %d\n", nr_devices)

	}

	if C.freenect_open_device(d.Ctx, &d.Dev, 0) < 0 {
		fmt.Printf("Could not open device\n")
		C.freenect_shutdown(d.Ctx)

	}
	fmt.Printf("Device Opened\n")
	C.freenect_set_led(d.Dev, C.LED_RED)
}

func (d *Kinect) SetYellowLedKinect() {
	errCode := C.freenect_set_led(d.Dev, C.LED_YELLOW)

	if errCode == 0 {
		fmt.Printf("Led changed")
	}
}
func (d *Kinect) SetRedLedKinect() {
	errCode := C.freenect_set_led(d.Dev, C.LED_RED)

	if errCode == 0 {
		fmt.Printf("Led changed")
	}
}



func (d *Kinect) StartRGBCalbacks() {
	C.initRGBBuffers()

	C.freenect_set_depth_mode(d.Dev, C.freenect_find_depth_mode(C.FREENECT_RESOLUTION_MEDIUM, C.FREENECT_DEPTH_11BIT))
	C.freenect_set_video_mode(d.Dev, C.freenect_find_video_mode(C.FREENECT_RESOLUTION_MEDIUM, C.FREENECT_VIDEO_RGB))

	C.freenect_set_depth_callback(d.Dev, (*[0]byte)(C.depth_cb))
	C.freenect_set_video_callback(d.Dev, (*[0]byte)(C.video_cb))
	C.freenect_set_video_buffer(d.Dev, unsafe.Pointer(C.rgb_back));

	//start video first for don't get [stream...] errors
	ret := C.freenect_start_video(d.Dev)
	if ret < 0 {
		C.freenect_shutdown(d.Ctx)
		return
	}
	ret = C.freenect_start_depth(d.Dev)
	if ret < 0 {
		C.freenect_shutdown(d.Ctx)
		return
	}
	C.freenect_set_led(d.Dev, C.LED_GREEN)
	
	//for C.freenect_process_events(d.Ctx)>= 0{
	//}
	
}

/*
func (d *Kinect) StartRGBCalbacks() {
	C.initRGBBuffers()

 
	C.freenect_set_video_mode(d.Dev, C.freenect_find_video_mode(C.FREENECT_RESOLUTION_MEDIUM, C.FREENECT_VIDEO_RGB))

 
	C.freenect_set_video_callback(d.Dev, (*[0]byte)(C.video_cb))
	C.freenect_set_video_buffer(d.Dev, unsafe.Pointer(C.rgb_back));

	//start video first for don't get [stream...] errors
	ret := C.freenect_start_video(d.Dev)
	if ret < 0 {
		C.freenect_shutdown(d.Ctx)
		return
	}
	 
}

func (d *Kinect) StartDepthCalbacks() {
 

	C.freenect_set_depth_mode(d.Dev, C.freenect_find_depth_mode(C.FREENECT_RESOLUTION_MEDIUM, C.FREENECT_DEPTH_11BIT))
 

	C.freenect_set_depth_callback(d.Dev, (*[0]byte)(C.depth_cb))
	 
	//start video first for don't get [stream...] errors
	 
	ret := C.freenect_start_depth(d.Dev)
	if ret < 0 {
		C.freenect_shutdown(d.Ctx)
		return
	}
	
	
 
}*/

func (d *Kinect) GetRGBMat(img *gocv.Mat) bool {
	
  C.freenect_process_events(d.Ctx)
 
	if C.m_new_rgb_frame {
		C.m_new_rgb_frame = false
		//C.freenect_process_events(d.Ctx)
		//C.freenect_update_tilt_state(d.Dev)
		//state := C.freenect_get_tilt_state(d.Dev)
		//C.freenect_get_mks_accel(state, &dx, &dy, &dz)
		C.pthread_mutex_lock(&C.m_rgb_mutex)
		//rgb_buffer := C.m_buffer_rgb
		rgb_buffer := C.rgb_back
		C.pthread_mutex_unlock(&C.m_rgb_mutex)
		attributes := C.freenect_get_current_video_mode(d.Dev)
 
		img_bytes := C.GoBytes(unsafe.Pointer(rgb_buffer),C.int(attributes.bytes))
		*img, _ = gocv.NewMatFromBytes(480, 640, gocv.MatTypeCV8UC3, img_bytes)
 
		gocv.CvtColor(*img, img, gocv.ColorBGRAToBGR)
		gocv.CvtColor(*img, img, gocv.ColorBGRToRGB)
 
		return true
	}
	return false
}

